// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//      contenteditable attribute is included anywhere else in the document.
//      Otherwise it causes space to appear at the top and bottom of elements
//      that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//      `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

=clearfix
    &:before,
    &:after
        content: " "
        display: table

    &:after
        clear: both

// Center-align a block level element

=center-block
    display: block
    margin-left: auto
    margin-right: auto

// Framework grid generation
//
// Used to generate the correct number of grid classes given by value of `$grid-columns`.

=make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}")
    @for $i from (1 + 1) through $grid-columns
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xl-#{$i}"

    #{$list}
        position: relative
        // Prevent columns from collapsing when empt
        min-height: 1px
        // Inner gutter via paddin
        padding-left:   ceil(($grid-gutter-width / 2))
        padding-right: floor(($grid-gutter-width / 2))

=float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}")
    @for $i from (1 + 1) through $grid-columns
        $list: "#{$list}, .col-#{$class}-#{$i}"

    #{$list}
        float: left

=calc-grid-column($index, $class, $type)
    @if ($type == width) and ($index > 0)
        .col-#{$class}-#{$index}
            width: percentage(($index / $grid-columns))


    @if ($type == push) and ($index > 0)
        .col-#{$class}-push-#{$index}
            left: percentage(($index / $grid-columns))


    @if ($type == push) and ($index == 0)
        .col-#{$class}-push-0
            left: auto


    @if ($type == pull) and ($index > 0)
        .col-#{$class}-pull-#{$index}
            right: percentage(($index / $grid-columns))


    @if ($type == pull) and ($index == 0)
        .col-#{$class}-pull-0
            right: auto


    @if ($type == offset)
        .col-#{$class}-offset-#{$index}
            margin-left: percentage(($index / $grid-columns))

=loop-grid-columns($columns, $class, $type)
    @for $i from 0 through $columns
        +calc-grid-column($i, $class, $type)

// Create grid for specific class
=make-grid($class)
    +float-grid-columns($class)
    +loop-grid-columns($grid-columns, $class, width)
    +loop-grid-columns($grid-columns, $class, pull)
    +loop-grid-columns($grid-columns, $class, push)
    +loop-grid-columns($grid-columns, $class, offset)

// Creates a wrapper for a series of columns
=make-component($gutter: $grid-gutter-width)
    margin-left:    ceil(($gutter / -2))
    margin-right: floor(($gutter / -2))
    +clearfix

